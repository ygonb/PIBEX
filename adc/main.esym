D G "__PCM__" 0 22 ""5.008""
D G "__DEVICE__" 0 22 "675"
D G "__DATE__" 0 22 ""09-jul-20""
D G "__TIME__" 0 22 ""16:02:32"" "Standard Header file for the PIC12F675 device ////////////////"
c L "set_tris_a" 2 5 13 "FUNCTION"
v L "value" 2 28 "int8" `53 
f B "set_tris_a" 2 28 "void(int8 value)" `52 
f B "get_tris_a" 2 29 "int8()" `54 
v L "value" 2 30 "int8" `56 
f B "output_a" 2 30 "void(int8 value)" `55 
f B "input_a" 2 31 "int8()" `57 
f B "input_change_a" 2 32 "int8()" `58 
v L "pin" 2 33 "int16" `60 
f B "input" 2 33 "int8(int16 pin)" `59 
v L "pin" 2 34 "int16" `62 
f B "input_state" 2 34 "int8(int16 pin)" `61 
v L "pin" 2 35 "int16" `64 
f B "output_low" 2 35 "void(int16 pin)" `63 
v L "pin" 2 36 "int16" `66 
f B "output_high" 2 36 "void(int16 pin)" `65 
v L "pin" 2 37 "int16" `68 
f B "output_toggle" 2 37 "void(int16 pin)" `67 
v L "pin" 2 38 "int16" `70 
v L "level" 2 38 "int8" `71 
f B "output_bit" 2 38 "void(int16 pin,int8 level)" `69 
v L "pin" 2 39 "int16" `73 
f B "output_float" 2 39 "void(int16 pin)" `72 
v L "pin" 2 40 "int16" `75 
f B "output_drive" 2 40 "void(int16 pin)" `74  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 44 "40"
d G "PIN_A1" 2 45 "41"
d G "PIN_A2" 2 46 "42"
d G "PIN_A3" 2 47 "43"
d G "PIN_A4" 2 48 "44"
d G "PIN_A5" 2 49 "45"
d G "FALSE" 2 52 "0"
d G "TRUE" 2 53 "1"
d G "BYTE" 2 55 "int8"
d G "BOOLEAN" 2 56 "int1"
d G "getc" 2 58 "getch"
d G "fgetc" 2 59 "getch"
d G "getchar" 2 60 "getch"
d G "putc" 2 61 "putchar"
d G "fputc" 2 62 "putchar"
d G "fgets" 2 63 "gets"
d G "fputs" 2 64 "puts"
c L "output_drive" 2 5 3 "FUNCTION"
f B "restart_cause" 2 69 "int8()" `76 
f B "reset_cpu" 2 70 "void()" `77 
f B "sleep" 2 71 "void()" `78  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 73 "3"
d G "WDT_TIMEOUT" 2 74 "11"
d G "MCLR_FROM_SLEEP" 2 75 "19"
d G "MCLR_FROM_RUN" 2 76 "27"
d G "NORMAL_POWER_UP" 2 77 "25"
d G "BROWNOUT_RESTART" 2 78 "26"
c L "sleep" 2 5 5 "FUNCTION"
v L "mode" 2 85 "int8" `80 
f B "setup_timer_0" 2 85 "void(int8 mode)" `79 
v L "value" 2 86 "int8" `82 
f B "set_timer0" 2 86 "void(int8 value)" `81 
f B "get_timer0" 2 87 "int8()" `83 
v L "mode" 2 88 "int8" `85 
v L "prescaler" 2 88 "int8" `86 
f B "setup_counters" 2 88 "void(int8 mode,int8 prescaler)" `84 
v L "value" 2 89 "int8" `88 
f B "set_rtcc" 2 89 "void(int8 value)" `87 
f B "get_rtcc" 2 90 "int8()" `89  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 92 "0"
d G "T0_EXT_L_TO_H" 2 93 "32"
d G "T0_EXT_H_TO_L" 2 94 "48"
d G "T0_DIV_1" 2 96 "8"
d G "T0_DIV_2" 2 97 "0"
d G "T0_DIV_4" 2 98 "1"
d G "T0_DIV_8" 2 99 "2"
d G "T0_DIV_16" 2 100 "3"
d G "T0_DIV_32" 2 101 "4"
d G "T0_DIV_64" 2 102 "5"
d G "T0_DIV_128" 2 103 "6"
d G "T0_DIV_256" 2 104 "7"
d G "T0_8_BIT" 2 107 "0"
d G "RTCC_INTERNAL" 2 109 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 110 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 111 "48"
d G "RTCC_DIV_1" 2 112 "8"
d G "RTCC_DIV_2" 2 113 "0"
d G "RTCC_DIV_4" 2 114 "1"
d G "RTCC_DIV_8" 2 115 "2"
d G "RTCC_DIV_16" 2 116 "3"
d G "RTCC_DIV_32" 2 117 "4"
d G "RTCC_DIV_64" 2 118 "5"
d G "RTCC_DIV_128" 2 119 "6"
d G "RTCC_DIV_256" 2 120 "7"
d G "RTCC_8_BIT" 2 121 "0"
c L "get_rtcc" 2 5 8 "FUNCTION"
v L "mode" 2 132 "int16" `91 
f B "setup_wdt" 2 132 "void(int16 mode)" `90 
f B "restart_wdt" 2 133 "void()" `92  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 136 "8"
d G "WDT_36MS" 2 137 "9"
d G "WDT_72MS" 2 138 "10"
d G "WDT_144MS" 2 139 "11"
d G "WDT_288MS" 2 140 "12"
d G "WDT_576MS" 2 141 "13"
d G "WDT_1152MS" 2 142 "14"
d G "WDT_2304MS" 2 143 "15"
c L "restart_wdt" 2 5 3 "FUNCTION"
v L "mode" 2 149 "int16" `94 
f B "setup_timer_1" 2 149 "void(int16 mode)" `93 
f B "get_timer1" 2 150 "int16()" `95 
v L "value" 2 151 "int16" `97 
f B "set_timer1" 2 151 "void(int16 value)" `96  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 154 "0"
d G "T1_INTERNAL" 2 155 "5"
d G "T1_EXTERNAL" 2 156 "7"
d G "T1_EXTERNAL_SYNC" 2 157 "3"
d G "T1_CLK_OUT" 2 159 "8"
d G "T1_DIV_BY_1" 2 161 "0"
d G "T1_DIV_BY_2" 2 162 "0x10"
d G "T1_DIV_BY_4" 2 163 "0x20"
d G "T1_DIV_BY_8" 2 164 "0x30"
d G "T1_GATE" 2 166 "0x40"
d G "T1_GATE_INVERTED" 2 167 "0xC0"
c L "set_timer1" 2 5 3 "FUNCTION"
v L "mode" 2 172 "int32" `99 
f B "setup_comparator" 2 172 "void(int32 mode)" `98  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 174 "0x0ff07"
d G "NC_NC" 2 175 "0x0ff07"
d G "A0_A1" 2 176 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 2 177 "0x6fb03"
d G "A1_VR" 2 178 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 2 179 "0x3fb01"
d G "COMP_INVERT" 2 182 "0x10"
c L "setup_comparator" 2 5 2 "FUNCTION"
v L "mode" 2 188 "int8" `102 
f B "setup_vref" 2 188 "void(int8 mode)" `101  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 190 "0xa0"
d G "VREF_HIGH" 2 191 "0x80"
c L "setup_vref" 2 5 5 "FUNCTION"
v L "mode" 2 199 "int16" `104 
f B "setup_adc" 2 199 "void(int16 mode)" `103 
f B "read_adc" 2 200 "int8()" `105 
v L "mode" 2 201 "int8" `107 
f G "read_adc" 2 201 "int8(int8 mode)" `106 
f G "read_adc" 2 202 "int16()" `108 
v L "mode" 2 203 "int8" `110 
f G "read_adc" 2 203 "int16(int8 mode)" `109 
f B "adc_done" 2 204 "int8()" `111  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 206 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 207 "0x100"
d G "ADC_CLOCK_DIV_4" 2 208 "0x40"
d G "ADC_CLOCK_DIV_8" 2 209 "0x10"
d G "ADC_CLOCK_DIV_16" 2 210 "0x50"
d G "ADC_CLOCK_DIV_32" 2 211 "0x20"
d G "ADC_CLOCK_DIV_64" 2 212 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 213 "0x30" "Internal 2-6us"
c L "adc_done" 2 5 1 "FUNCTION"
v L "pins" 2 216 "int16" `113 
f B "setup_adc_ports" 2 216 "void(int16 pins)" `112 
v L "pins" 2 217 "int16" `115 
v L "reference" 2 217 "int16" `116 
f G "setup_adc_ports" 2 217 "void(int16 pins,int16 reference)" `114 
v L "channel" 2 218 "int8" `118 
f B "set_adc_channel" 2 218 "void(int8 channel)" `117  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 222 "1" "| GP0"
d G "sAN1" 2 223 "2" "| GP1"
d G "sAN2" 2 224 "4" "| GP2"
d G "sAN3" 2 225 "8" "| GP4"
d G "NO_ANALOGS" 2 226 "0" "None"
d G "AN0_ANALOG" 2 227 "1" "!old only provided for compatibility"
d G "AN1_ANALOG" 2 228 "2" "!old only provided for compatibility"
d G "AN2_ANALOG" 2 229 "4" "!old only provided for compatibility"
d G "AN3_ANALOG" 2 230 "8" "!old only provided for compatibility"
d G "ALL_ANALOG" 2 231 "7" "!old only provided for compatibility"
d G "VSS_VDD" 2 234 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 235 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 2 238 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 239 "1"
d G "ADC_READ_ONLY" 2 240 "6"
c L "set_adc_channel" 2 5 3 "FUNCTION"
v L "x" 2 246 "sint8" `120 
f B "abs" 2 246 "sint8(sint8 x)" `119 
v L "x" 2 247 "sint16" `122 
f G "abs" 2 247 "sint16(sint16 x)" `121 
v L "x" 2 248 "sint32" `124 
f G "abs" 2 248 "sint32(sint32 x)" `123 
v L "x" 2 249 "float" `126 
f G "abs" 2 249 "float(float x)" `125 
v L "??65535" 2 250 "int8" `128 
v L "??65535" 2 250 "int8" `129 
f B "_mul" 2 250 "int16(int8 ,int8 )" `127 
v L "??65535" 2 251 "sint8" `128 
v L "??65535" 2 251 "sint8" `132 
f G "_mul" 2 251 "sint16(sint8 ,sint8 )" `130 
v L "??65535" 2 252 "int16" `128 
v L "??65535" 2 252 "int16" `135 
f G "_mul" 2 252 "int32(int16 ,int16 )" `133 
v L "??65535" 2 253 "sint16" `128 
v L "??65535" 2 253 "sint16" `138 
f G "_mul" 2 253 "sint32(sint16 ,sint16 )" `136  "Memory Manipulation Prototypes:"
v L "bank" 2 256 "int8" `140 
v L "offset" 2 256 "int8" `141 
f B "read_bank" 2 256 "int8(int8 bank,int8 offset)" `139 
v L "bank" 2 257 "int8" `143 
v L "offset" 2 257 "int8" `144 
v L "value" 2 257 "int8" `145 
f B "write_bank" 2 257 "void(int8 bank,int8 offset,int8 value)" `142 
v L "dest" 2 258 "*int8" `147 
v L "src" 2 258 "*int8" `148 
f B "strcpy" 2 258 "void(*int8 dest,*int8 src)" `146 
v L "dest" 2 259 "*int8" `150 
v L "src" 2 259 "*int8" `151 
f B "strcopy" 2 259 "void(*int8 dest,*int8 src)" `149 
v L "destination" 2 260 "*int8" `153 
v L "value" 2 260 "int8" `154 
v L "num" 2 260 "int16" `155 
f B "memset" 2 260 "void(*int8 destination,int8 value,int16 num)" `152 
v L "destination" 2 261 "*int8" `157 
v L "source" 2 261 "*int8" `158 
v L "num" 2 261 "int16" `159 
f B "memcpy" 2 261 "void(*int8 destination,*int8 source,int16 num)" `156  "String Prototypes:"
v L "cvalue" 2 264 "int8" `161 
f B "toupper" 2 264 "int8(int8 cvalue)" `160 
v L "cvalue" 2 265 "int8" `163 
f B "tolower" 2 265 "int8(int8 cvalue)" `162 
v L "string" 2 266 "*int8" `165 
v L "cstring" 2 266 "*int8" `166 
f B "sprintf" 2 266 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `164  "Data Manipulators Prototypes:"
v L "address" 2 269 "*int8" `169 
v L "bytes" 2 269 "int8" `170 
v L "value" 2 269 "int8" `171 
f B "shift_left" 2 269 "int8(*int8 address,int8 bytes,int8 value)" `168 
v L "address" 2 270 "*int8" `173 
v L "bytes" 2 270 "int8" `174 
v L "value" 2 270 "int8" `175 
f B "shift_right" 2 270 "int8(*int8 address,int8 bytes,int8 value)" `172 
v L "address" 2 271 "*int8" `177 
v L "bytes" 2 271 "int8" `178 
f B "rotate_left" 2 271 "void(*int8 address,int8 bytes)" `176 
v L "address" 2 272 "*int8" `180 
v L "bytes" 2 272 "int8" `181 
f B "rotate_right" 2 272 "void(*int8 address,int8 bytes)" `179 
v L "value" 2 273 "int8" `183 
f B "swap" 2 273 "void(int8 value)" `182 
v L "var" 2 274 "int16" `185 
v L "offset" 2 274 "int8" `186 
f B "make8" 2 274 "int8(int16 var,int8 offset)" `184 
v L "var" 2 275 "int32" `185 
v L "offset" 2 275 "int8" `189 
f G "make8" 2 275 "int8(int32 var,int8 offset)" `187 
v L "varhigh" 2 276 "int8" `191 
v L "varlow" 2 276 "int8" `192 
f B "make16" 2 276 "int16(int8 varhigh,int8 varlow)" `190 
v L "var1" 2 277 "int16" `194 
f B "make32" 2 277 "int32(int16 var1)" `193 
v L "var1" 2 278 "int16" `196 
v L "var2" 2 278 "int16" `197 
f G "make32" 2 278 "int32(int16 var1,int16 var2)" `195 
v L "var1" 2 279 "int16" `196 
v L "var2" 2 279 "int8" `200 
f G "make32" 2 279 "int32(int16 var1,int8 var2)" `198 
v L "var1" 2 280 "int16" `202 
v L "var2" 2 280 "int8" `203 
v L "var3" 2 280 "int8" `204 
f G "make32" 2 280 "int32(int16 var1,int8 var2,int8 var3)" `201 
v L "var1" 2 281 "int8" `206 
f G "make32" 2 281 "int32(int8 var1)" `205 
v L "var1" 2 282 "int8" `196 
v L "var2" 2 282 "int8" `209 
f G "make32" 2 282 "int32(int8 var1,int8 var2)" `207 
v L "var1" 2 283 "int8" `202 
v L "var2" 2 283 "int8" `203 
v L "var3" 2 283 "int8" `213 
f G "make32" 2 283 "int32(int8 var1,int8 var2,int8 var3)" `210 
v L "var1" 2 284 "int8" `215 
v L "var2" 2 284 "int8" `216 
v L "var3" 2 284 "int8" `217 
v L "var4" 2 284 "int8" `218 
f G "make32" 2 284 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `214 
v L "var1" 2 285 "int8" `196 
v L "var2" 2 285 "int16" `221 
f G "make32" 2 285 "int32(int8 var1,int16 var2)" `219 
v L "var1" 2 286 "int8" `202 
v L "var2" 2 286 "int16" `203 
v L "var3" 2 286 "int8" `225 
f G "make32" 2 286 "int32(int8 var1,int16 var2,int8 var3)" `222 
v L "var1" 2 287 "int8" `202 
v L "var2" 2 287 "int8" `203 
v L "var3" 2 287 "int16" `229 
f G "make32" 2 287 "int32(int8 var1,int8 var2,int16 var3)" `226 
v L "var" 2 288 "int8" `231 
v L "bit" 2 288 "int8" `232 
f B "bit_set" 2 288 "void(int8 var,int8 bit)" `230 
v L "var" 2 289 "int16" `231 
v L "bit" 2 289 "int8" `235 
f G "bit_set" 2 289 "void(int16 var,int8 bit)" `233 
v L "var" 2 290 "int32" `231 
v L "bit" 2 290 "int8" `238 
f G "bit_set" 2 290 "void(int32 var,int8 bit)" `236 
v L "var" 2 291 "int8" `240 
v L "bit" 2 291 "int8" `241 
f B "bit_clear" 2 291 "void(int8 var,int8 bit)" `239 
v L "var" 2 292 "int16" `240 
v L "bit" 2 292 "int8" `244 
f G "bit_clear" 2 292 "void(int16 var,int8 bit)" `242 
v L "var" 2 293 "int32" `240 
v L "bit" 2 293 "int8" `247 
f G "bit_clear" 2 293 "void(int32 var,int8 bit)" `245 
v L "var" 2 294 "int8" `249 
v L "bit" 2 294 "int8" `250 
f B "bit_test" 2 294 "int8(int8 var,int8 bit)" `248 
v L "var" 2 295 "int16" `249 
v L "bit" 2 295 "int8" `253 
f G "bit_test" 2 295 "int8(int16 var,int8 bit)" `251 
v L "var" 2 296 "int32" `249 
v L "bit" 2 296 "int8" `256 
f G "bit_test" 2 296 "int8(int32 var,int8 bit)" `254  "#use delay() Prototypes:"
v L "count" 2 299 "int8" `258 
f B "delay_cycles" 2 299 "void(int8 count)" `257 
v L "time" 2 300 "int16" `260 
f B "delay_ms" 2 300 "void(int16 time)" `259 
v L "time" 2 301 "int16" `262 
f B "delay_us" 2 301 "void(int16 time)" `261  "#use rs232() Prototypes:"
v L "cdata" 2 304 "int8" `264 
f B "putchar" 2 304 "void(int8 cdata)" `263 
v L "cdata" 2 305 "int8" `266 
v L "stream" 2 305 "int8" `267 
f G "putchar" 2 305 "void(int8 cdata,int8 stream)" `265 
v L "string" 2 306 "*int8" `269 
f B "puts" 2 306 "void(*int8 string)" `268 
v L "string" 2 307 "*int8" `271 
v L "stream" 2 307 "int8" `272 
f G "puts" 2 307 "void(*int8 string,int8 stream)" `270 
f B "getch" 2 308 "int8()" `273 
v L "stream" 2 309 "int8" `275 
f G "getch" 2 309 "int8(int8 stream)" `274 
v L "string" 2 310 "*int8" `277 
f B "gets" 2 310 "void(*int8 string)" `276 
v L "string" 2 311 "*int8" `279 
v L "stream" 2 311 "int8" `280 
f G "gets" 2 311 "void(*int8 string,int8 stream)" `278 
f B "kbhit" 2 312 "int8()" `281 
v L "stream" 2 313 "int8" `283 
f G "kbhit" 2 313 "int8(int8 stream)" `282 
v L "string" 2 314 "*int8" `285 
f B "printf" 2 314 "void(*int8 string,*int8 _VA_LIST)" `284 
v L "stream" 2 315 "int8" `288 
v L "string" 2 315 "*int8" `289 
f B "fprintf" 2 315 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `287 
f B "putc_send" 2 316 "void()" `291 
v L "stream" 2 317 "int8" `293 
f B "fputc_send" 2 317 "void(int8 stream)" `292 
f B "rcv_buffer_full" 2 318 "int8()" `294 
v L "stream" 2 319 "int8" `296 
f G "rcv_buffer_full" 2 319 "int8(int8 stream)" `295 
f B "rcv_buffer_bytes" 2 320 "int16()" `297 
v L "stream" 2 321 "int8" `299 
f G "rcv_buffer_bytes" 2 321 "int16(int8 stream)" `298 
f B "tx_buffer_full" 2 322 "int8()" `300 
v L "stream" 2 323 "int8" `302 
f G "tx_buffer_full" 2 323 "int8(int8 stream)" `301 
f B "tx_buffer_bytes" 2 324 "int16()" `303 
v L "stream" 2 325 "int8" `305 
f G "tx_buffer_bytes" 2 325 "int16(int8 stream)" `304  "#use i2c() Prototypes:"
f B "i2c_read" 2 328 "int8()" `306 
v L "stream" 2 329 "int8" `308 
f G "i2c_read" 2 329 "int8(int8 stream)" `307 
v L "stream" 2 330 "int8" `310 
v L "ack" 2 330 "int8" `311 
f G "i2c_read" 2 330 "int8(int8 stream,int8 ack)" `309 
v L "data" 2 331 "int8" `313 
f B "i2c_write" 2 331 "int8(int8 data)" `312 
v L "stream" 2 332 "int8" `315 
v L "data" 2 332 "int8" `316 
f G "i2c_write" 2 332 "int8(int8 stream,int8 data)" `314 
f B "i2c_start" 2 333 "void()" `317 
v L "stream" 2 334 "int8" `319 
f G "i2c_start" 2 334 "void(int8 stream)" `318 
v L "stream" 2 335 "int8" `321 
v L "restart" 2 335 "int8" `322 
f G "i2c_start" 2 335 "void(int8 stream,int8 restart)" `320 
f B "i2c_stop" 2 336 "void()" `323 
v L "stream" 2 337 "int8" `325 
f G "i2c_stop" 2 337 "void(int8 stream)" `324 
f B "i2c_isr_state" 2 338 "int8()" `326 
v L "addr" 2 339 "int8" `328 
f B "i2c_slaveaddr" 2 339 "void(int8 addr)" `327 
v L "stream" 2 340 "int8" `330 
v L "addr" 2 340 "int8" `331 
f G "i2c_slaveaddr" 2 340 "void(int8 stream,int8 addr)" `329 
f B "i2c_poll" 2 341 "int8()" `332 
v L "stream" 2 342 "int8" `334 
f G "i2c_poll" 2 342 "int8(int8 stream)" `333 
v L "baud" 2 343 "int32" `336 
f B "i2c_init" 2 343 "void(int32 baud)" `335 
v L "stream" 2 344 "int8" `338 
v L "baud" 2 344 "int32" `339 
f G "i2c_init" 2 344 "void(int8 stream,int32 baud)" `337  "#use spi() Prototypes:"
f B "spi_xfer" 2 347 "int8()" `340 
f G "spi_xfer" 2 348 "int16()" `341 
f G "spi_xfer" 2 349 "int32()" `342 
v L "data" 2 350 "int8" `344 
f G "spi_xfer" 2 350 "int8(int8 data)" `343 
v L "data" 2 351 "int16" `346 
f G "spi_xfer" 2 351 "int16(int16 data)" `345 
v L "data" 2 352 "int32" `348 
f G "spi_xfer" 2 352 "int32(int32 data)" `347 
v L "stream" 2 353 "int8" `350 
v L "data" 2 353 "int8" `351 
f G "spi_xfer" 2 353 "int8(int8 stream,int8 data)" `349 
v L "stream" 2 354 "int8" `350 
v L "data" 2 354 "int16" `354 
f G "spi_xfer" 2 354 "int16(int8 stream,int16 data)" `352 
v L "stream" 2 355 "int8" `350 
v L "data" 2 355 "int32" `357 
f G "spi_xfer" 2 355 "int32(int8 stream,int32 data)" `355 
v L "stream" 2 356 "int8" `359 
v L "data" 2 356 "int8" `360 
v L "bits" 2 356 "int8" `361 
f G "spi_xfer" 2 356 "int8(int8 stream,int8 data,int8 bits)" `358 
v L "stream" 2 357 "int8" `359 
v L "data" 2 357 "int16" `360 
v L "bits" 2 357 "int8" `365 
f G "spi_xfer" 2 357 "int16(int8 stream,int16 data,int8 bits)" `362 
v L "stream" 2 358 "int8" `359 
v L "data" 2 358 "int32" `360 
v L "bits" 2 358 "int8" `369 
f G "spi_xfer" 2 358 "int32(int8 stream,int32 data,int8 bits)" `366 
v L "baud" 2 359 "int32" `371 
f B "spi_init" 2 359 "void(int32 baud)" `370 
v L "stream" 2 360 "int8" `373 
v L "baud" 2 360 "int32" `374 
f G "spi_init" 2 360 "void(int8 stream,int32 baud)" `372 
v L "baud" 2 361 "int32" `376 
f B "spi_speed" 2 361 "void(int32 baud)" `375 
v L "stream" 2 362 "int8" `378 
v L "baud" 2 362 "int32" `379 
f G "spi_speed" 2 362 "void(int8 stream,int32 baud)" `377 
v L "stream" 2 363 "int8" `381 
v L "baud" 2 363 "int32" `382 
v L "clock" 2 363 "int32" `383 
f G "spi_speed" 2 363 "void(int8 stream,int32 baud,int32 clock)" `380 
v L "data" 2 364 "int8" `385 
f B "spi_prewrite" 2 364 "void(int8 data)" `384 
v L "data" 2 365 "int16" `387 
f G "spi_prewrite" 2 365 "void(int16 data)" `386 
v L "data" 2 366 "int32" `389 
f G "spi_prewrite" 2 366 "void(int32 data)" `388 
v L "??65535" 2 367 "int8" `391 
v L "data" 2 367 "int8" `392 
f G "spi_prewrite" 2 367 "void(int8 ,int8 data)" `390 
v L "??65535" 2 368 "int8" `391 
v L "data" 2 368 "int16" `395 
f G "spi_prewrite" 2 368 "void(int8 ,int16 data)" `393 
v L "??65535" 2 369 "int8" `391 
v L "data" 2 369 "int32" `398 
f G "spi_prewrite" 2 369 "void(int8 ,int32 data)" `396 
f B "spi_xfer_in" 2 370 "int8()" `399 
f G "spi_xfer_in" 2 371 "int16()" `400 
f G "spi_xfer_in" 2 372 "int32()" `401 
v L "bits" 2 373 "int8" `403 
f G "spi_xfer_in" 2 373 "int8(int8 bits)" `402 
v L "bits" 2 374 "int8" `405 
f G "spi_xfer_in" 2 374 "int16(int8 bits)" `404 
v L "bits" 2 375 "int8" `407 
f G "spi_xfer_in" 2 375 "int32(int8 bits)" `406 
v L "stream" 2 376 "int8" `409 
v L "bits" 2 376 "int8" `410 
f G "spi_xfer_in" 2 376 "int8(int8 stream,int8 bits)" `408 
v L "stream" 2 377 "int8" `409 
v L "bits" 2 377 "int8" `413 
f G "spi_xfer_in" 2 377 "int16(int8 stream,int8 bits)" `411 
v L "stream" 2 378 "int8" `409 
v L "bits" 2 378 "int8" `416 
f G "spi_xfer_in" 2 378 "int32(int8 stream,int8 bits)" `414  "#use rtos() Prototypes:"
f B "rtos_run" 2 381 "void()" `417 
f B "rtos_yield" 2 382 "void()" `418 
v L "task" 2 383 "int8" `420 
f B "rtos_enable" 2 383 "void(int8 task)" `419 
v L "task" 2 384 "int8" `422 
f B "rtos_disable" 2 384 "void(int8 task)" `421 
f B "rtos_terminate" 2 385 "void()" `423 
v L "flag" 2 386 "int8" `425 
f B "rtos_await" 2 386 "void(int8 flag)" `424 
v L "sem" 2 387 "int8" `427 
f B "rtos_wait" 2 387 "void(int8 sem)" `426 
v L "sem" 2 388 "int8" `429 
f B "rtos_signal" 2 388 "void(int8 sem)" `428 
v L "task" 2 389 "int8" `431 
v L "msg" 2 389 "int8" `432 
f B "rtos_msg_send" 2 389 "void(int8 task,int8 msg)" `430 
f B "rtos_msg_read" 2 390 "int8()" `433 
f B "rtos_msg_poll" 2 391 "int8()" `434 
v L "task" 2 392 "int8" `436 
f B "rtos_overrun" 2 392 "int8(int8 task)" `435 
v L "task" 2 393 "int8" `438 
v L "stat" 2 393 "*int8" `439 
f B "rtos_stats" 2 393 "void(int8 task,*int8 stat)" `437  "#use timer() Prototypes:"
f B "get_ticks" 2 396 "int8()" `440 
f G "get_ticks" 2 397 "int16()" `441 
f G "get_ticks" 2 398 "int32()" `442 
v L "stream" 2 399 "int8" `444 
f G "get_ticks" 2 399 "int8(int8 stream)" `443 
v L "stream" 2 400 "int8" `446 
f G "get_ticks" 2 400 "int16(int8 stream)" `445 
v L "stream" 2 401 "int8" `448 
f G "get_ticks" 2 401 "int32(int8 stream)" `447 
v L "value" 2 402 "int8" `450 
f B "set_ticks" 2 402 "void(int8 value)" `449 
v L "value" 2 403 "int16" `452 
f G "set_ticks" 2 403 "void(int16 value)" `451 
v L "value" 2 404 "int32" `454 
f G "set_ticks" 2 404 "void(int32 value)" `453 
v L "stream" 2 405 "int8" `456 
v L "value" 2 405 "int8" `457 
f G "set_ticks" 2 405 "void(int8 stream,int8 value)" `455 
v L "stream" 2 406 "int8" `456 
v L "value" 2 406 "int16" `460 
f G "set_ticks" 2 406 "void(int8 stream,int16 value)" `458 
v L "stream" 2 407 "int8" `456 
v L "value" 2 407 "int32" `463 
f G "set_ticks" 2 407 "void(int8 stream,int32 value)" `461  "#use pwm() Prototypes:"
f B "pwm_on" 2 410 "void()" `464 
v L "stream" 2 411 "int8" `466 
f G "pwm_on" 2 411 "void(int8 stream)" `465 
f B "pwm_off" 2 412 "void()" `467 
v L "stream" 2 413 "int8" `469 
f G "pwm_off" 2 413 "void(int8 stream)" `468 
v L "duty" 2 414 "int16" `471 
f B "pwm_set_duty" 2 414 "void(int16 duty)" `470 
v L "stream" 2 415 "int8" `473 
v L "duty" 2 415 "int16" `474 
f G "pwm_set_duty" 2 415 "void(int8 stream,int16 duty)" `472 
v L "percent" 2 416 "int16" `476 
f B "pwm_set_duty_percent" 2 416 "void(int16 percent)" `475 
v L "stream" 2 417 "int8" `478 
v L "percent" 2 417 "int16" `479 
f G "pwm_set_duty_percent" 2 417 "void(int8 stream,int16 percent)" `477 
v L "frequency" 2 418 "int32" `481 
f B "pwm_set_frequency" 2 418 "void(int32 frequency)" `480 
v L "stream" 2 419 "int8" `483 
v L "frequency" 2 419 "int32" `484 
f G "pwm_set_frequency" 2 419 "void(int8 stream,int32 frequency)" `482  "#use capture() Prototypes:"
f B "get_capture_time" 2 422 "int16()" `485 
v L "stream" 2 423 "int8" `487 
f G "get_capture_time" 2 423 "int16(int8 stream)" `486 
f B "get_capture_event" 2 424 "int8()" `488 
v L "stream" 2 425 "int8" `490 
f G "get_capture_event" 2 425 "int8(int8 stream)" `489  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
v L "address" 2 438 "int16" `492 
f B "goto_address" 2 438 "void(int16 address)" `491 
v L "label" 2 439 "int16" `494 
f B "label_address" 2 439 "int16(int16 label)" `493  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 446 "int8" `495 
v L "address" 2 449 "__EEADDRESS__" `497 
f B "read_eeprom" 2 449 "int8(__EEADDRESS__ address)" `496 
v L "address" 2 450 "__EEADDRESS__" `499 
v L "value" 2 450 "int8" `500 
f B "write_eeprom" 2 450 "void(__EEADDRESS__ address,int8 value)" `498  "INT"
c L "write_eeprom" 2 5 4 "FUNCTION"
v L "interrupt" 2 457 "int32" `502 
f B "enable_interrupts" 2 457 "void(int32 interrupt)" `501 
v L "interrupt" 2 458 "int32" `504 
f B "disable_interrupts" 2 458 "void(int32 interrupt)" `503 
v L "interrupt" 2 459 "int32" `506 
f B "clear_interrupt" 2 459 "void(int32 interrupt)" `505 
v L "interrupt" 2 460 "int32" `508 
f B "interrupt_active" 2 460 "int8(int32 interrupt)" `507 
v L "source" 2 461 "int8" `510 
v L "edge" 2 461 "int8" `511 
f B "ext_int_edge" 2 461 "void(int8 source,int8 edge)" `509 
v L "address" 2 462 "int16" `513 
f B "jump_to_irs" 2 462 "void(int16 address)" `512  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 464 "0x40"
d G "H_TO_L" 2 465 "0"
d G "GLOBAL" 2 467 "0x0BC0"
d G "PERIPH" 2 468 "0x0B40"
d G "INT_RTCC" 2 469 "0x000B20"
d G "INT_EXT_L2H" 2 470 "0x50000B10"
d G "INT_EXT_H2L" 2 471 "0x60000B10"
d G "INT_EXT" 2 472 "0x000B10"
d G "INT_AD" 2 473 "0x008C40"
d G "INT_TIMER1" 2 474 "0x008C01"
d G "INT_TIMER0" 2 475 "0x000B20"
d G "INT_EEPROM" 2 476 "0x008C80"
d G "INT_COMP" 2 477 "0x008C08"
d G "INT_RA" 2 478 "0x00FF0B08"
d G "INT_RA0" 2 479 "0x0010B08"
d G "INT_RA1" 2 480 "0x0020B08"
d G "INT_RA2" 2 481 "0x0040B08"
d G "INT_RA3" 2 482 "0x0080B08"
d G "INT_RA4" 2 483 "0x0100B08"
d G "INT_RA5" 2 484 "0x0200B08"
V G "analogico" 0 3 "int16" `518 
F G "main" 0 5 "void()" `519 
C L "main" 0 11 1 "FUNCTION"
C L "main" 0 11 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
